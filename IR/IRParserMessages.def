// IRParserMessages.def
// Copyright (c) Lup Gratian
// 
// Contains the list with the error text messages used by the IR Parser.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
errorMessage(INVALID_TOKEN,         "Invalid token found")
errorMessage(INVALID_ARRAY_SIZE,    "Array size is invalid")
errorMessage(INVALID_TYPE,          "Declared type is invalid")
errorMessage(INVALID_TYPENAME,      "Invalid typename declaration")
errorMessage(TYPENAME_NOT_FOUND,    "Reference to unknown typename")
errorMessage(EXPECTED_TYPE,         "Type declaration expected")
errorMessage(EXPECTED_INTEGER,      "Integer constant expected")
errorMessage(EXPECTED_OPEN_PAREN,   "Open parenthesis ( expected")
errorMessage(EXPECTED_CLOSE_PAREN,  "Close parenthesis ) expected")
errorMessage(EXPECTED_OPEN_SQUARE,  "Open square [ expected")
errorMessage(EXPECTED_CLOSE_SQUARE, "Close square ] expected")
errorMessage(EXPECTED_OPEN_CURLY,   "Open curly { expected")
errorMessage(EXPECTED_CLOSE_CURLY,  "Close curly } expected")
errorMessage(EXPECTED_IDENTIFIER,   "Identifier expected")
errorMessage(EXPECTED_DOT,          "Dot . expected")
errorMessage(EXPECTED_EQUAL,        "Equal = expected")
errorMessage(EXPECTED_OFFSET,       "Field offset expect expected")
errorMessage(EXPECTED_COLON,        "Colon : expected") 
errorMessage(EXPECTED_COMMA,        "Comma , expected") 
errorMessage(EXPECTED_FUNCTION,     "Expected function in call")
errorMessage(EXPECTED_OPERAND,      "Expected an operand")
errorMessage(INVALID_INITIALIZER,   "Initializer is invalid")
errorMessage(DUPLICATE_SYMBOL,      "Symbol already declared")
errorMessage(INITIALIZER_COUNT,     "Too many/few initializer values")
errorMessage(INVALID_ATTRIBUTES,    "Attribute combination is invalid")
errorMessage(INVALID_IDENTIFIER,    "Reference of unknown operand")
errorMessage(INVALID_ELLIPSIS,      "Ellipsis ... invalid here")
errorMessage(INVALID_FIELD,         "Record field is invalid")
errorMessage(INVALID_INTRINSIC,     "Intrinsic not available")
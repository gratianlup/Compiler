// IRParserErrors.def
// Copyright (c) Lup Gratian
//
// Contains the list with the error definitions used by the IR Parser.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
errorMessage(FUNCT_NO_BLOCKS,                "Function with no blocks")
errorMessage(FUNCT_VARARGS_NO_PARAMS,        "Varargs on function without parameters")
errorMessage(FUNCT_DECL_HAS_BODY,            "Function marked as declaration has body")
errorMessage(FUNCT_NO_RETURN_INSTR,          "No return instruction found in function")
errorMessage(FUNCT_GLOBAL_VAR_PARAM,         "Global variable as function parameter")
errorMessage(FUNCT_NO_RETURN_TYPE,           "Missing return type for function")
errorMessage(FUNCT_NO_PARENT,                "Function parent (unit) not set")
errorMessage(FUNCT_NO_TABLE,                 "Function parent symbol table not set.")
errorMessage(FUNCT_TYPE_NOT_FUNCT,           "Function type is not a function")
errorMessage(FUNCT_RETURN_TYPE_FUNCT,        "Function has function return type")
errorMessage(FUNCT_UNNAMED,                  "Unnamed function")
errorMessage(FUNCT_PARAM_COUNT,              "Param. count and param. count from funct. type mismatch")
errorMessage(FUNCT_PARAM_TYPE,               "Param. type and param. type from funct. type mismatch")
errorMessage(FUNCT_PARAM_NOT_AUTO,           "Function parameter not marked 'auto'")
errorMessage(BLOCK_NO_INSTR,                 "Empty block")
errorMessage(BLOCK_END_NOT_BRANCH_INSTR,     "Block doesn't end with a branching instruction")
errorMessage(BLOCK_DUPLICATE_BRANCH_INSTR,   "Block with duplicate branching instruction")
errorMessage(BLOCK_INVALID_PARENT,           "Block parent invalid")
errorMessage(BLOCK_UNNAMED,                  "Block is unnamed")
errorMessage(FUNCT_VAR_NOT_AUTO,             "Function variable is not marked 'auto'")
errorMessage(FUNCT_VAR_GLOBAL,			     "Global variable declared in function")
errorMessage(VARIABLE_NO_TYPE,			     "Type of variable is NULL")
errorMessage(VARIABLE_VOID_TYPE,		     "Type of variable is void (or pointer to void)")
errorMessage(VARIABLE_FUNCT_TYPE,		     "Type of variable is function")
errorMessage(VARIABLE_UNNAMED,			     "Variable is unnamed")
errorMessage(VARIABLE_UNIT_LEVEL,		     "Variable (not global) declared at unit level")
errorMessage(VARIABLE_NO_TABLE,			     "Variable not associated with symbol table")
errorMessage(VARIABLE_ALIGNMENT,		     "Variable alignment is negative")
errorMessage(GLOBAL_AUTO,				     "Global variable declared 'auto'")
errorMessage(GLOBAL_CONST_NO_INIT,		     "Constant global variable has no initializer")
errorMessage(INIT_EMPTY,				     "Empty array/record initializer")
errorMessage(INIT_INVALID_NUMBER,		     "Too many (or too few) values in initializer.")
errorMessage(INIT_INVALID_TYPE,			     "Initializer type mismatch")
errorMessage(INIT_LIST_INVALID,			     "Initializer list not on array/record")
errorMessage(INIT_VALUE_INVALID,		     "Value initializer on array/record")
errorMessage(INIT_VALUE_OP,				     "Initializer value is not a valid operand")
errorMessage(TYPENAME_NO_TYPE,			     "Typename type is NULL")
errorMessage(TYPENAME_NO_NAME,			     "Unnamed typename symbol")
errorMessage(RECORD_NO_FIELDS,			     "Records has no fields")
errorMessage(FIELD_OFFSET_NEGATIVE,		     "Field has negative offset")
errorMessage(FIELD_OFFSET_SMALLER,		     "Field offset is smaller than previous")
errorMessage(FIELD_NO_TYPE,				     "Field has no type")
errorMessage(FIELD_VOID_TYPE,			     "Field has void type")
errorMessage(FIELD_FUNCT_TYPE,			     "Field has function type")
errorMessage(BLOCK_REF_NO_BLOCK,		     "Referenced block is NULL")
errorMessage(BLOCK_REF_INVALID_FUNCT,	     "Referenced block not in current function")
errorMessage(FUNCT_REF_NO_BLOCK,		     "Referenced function is NULL")
errorMessage(TEMP_NO_TYPE,                   "Temporary type is NULL")
errorMessage(TEMP_INVALID_TYPE,			     "Temporary has invalid type")
errorMessage(TEMP_NO_DEFINING_INSTR,		 "Temporary has no defining instruction")
errorMessage(OP_NO_TYPE,				     "Operand has no type")
errorMessage(OP_NO_SYMBOL,				     "Operand has no symbol (and it's not a temporary)")
errorMessage(OP_INVALID_SYMBOL,			     "Operand has an invalid symbol")
errorMessage(INT_CONST_NOT_INT,              "Integer constant not integer")
errorMessage(FLOAT_CONST_NOT_FLOAT,          "Floating constant type not floating")
errorMessage(STRING_CONST_NOT_ARRAY,         "String constant type not valid array")
errorMessage(NULL_CONST_NOT_POINTER,         "Null pointer constant type not pointer")
errorMessage(UNDEF_CONST_INVALID_TYPE,       "Undefined constant has invalid type")
errorMessage(INSTR_NO_PARENT,                "Instruction has no parent")
errorMessage(INSTR_NO_OPERAND,               "At least one of the operands is NULL")
errorMessage(INSTR_VARIABLE_OPERAND,         "One of the operands is a variable reference")
errorMessage(INSTR_RESULT_INVALID_TYPE,      "Instruction result operand has invalid type")
errorMessage(INSTR_RESULT_COMPLEX_TYPE,      "Instruction result is not a simple type")
errorMessage(ARITH_OPERAND_INVALID_TYPE,     "The arith. instr. operand type is not valid")
errorMessage(ARITH_OPERANDS_NOT_SAME_TYPE,   "The arith. instr. operands don't have the same type")
errorMessage(LOGICAL_OPERAND_INVALID_TYPE,   "The logical instr. operand type is not valid")
errorMessage(LOGICAL_OPERANDS_NOT_SAME_TYPE, "The logical instr. operands don't have the same type")
errorMessage(CONV_INVALID_TYPE,              "Conversion of operand with invalid type")
errorMessage(CONV_CAST_TYPE,				 "Conversion with invalid cast type")
errorMessage(CONV_RESULT_NOT_CAST_TYPE,		 "Conversion result type not the cast type")
errorMessage(IF_COND_NOT_INT,				 "Condition operand not integer")
errorMessage(GOTO_INVALID_TARGET,			 "Goto has invalid target")
errorMessage(SWITCH_SELECT_NOT_INT,			 "Switch select operand not integer")
errorMessage(SWITCH_ALT_NULL,				 "No block reference for default case")
errorMessage(SWITCH_ALT_INVALID,			 "Default case no block reference")
errorMessage(CASE_TARGET_NULL,				 "Case target is NULL")
errorMessage(CASE_TARGET_INVALID,			 "Case target is not a block reference")
errorMessage(CALL_TARGET_NULL,				 "Call target is NULL")
errorMessage(CALL_TARGET_NOT_FUNCT,			 "Call target is not a function reference/pointer")
errorMessage(CALL_VOID_RESULT_OP,			 "Result operand for void-function call")
errorMessage(CALL_RESULT_TYPE,				 "Call result operand type not the return type")
errorMessage(ARGUMENT_NUM_MISMATCH,			 "Number of arguments is invalid")
errorMessage(ARGUMENT_TYPE_MISMATCH,		 "Argument and parameter type not the same")
errorMessage(ADDRESS_SOURCE_INVALID,		 "Address source address is not a valid pointer")
errorMessage(ADDRESS_INDEX_INVALID,			 "Address index not an integer")
errorMessage(ADDRESS_RESULT_INVALID,		 "Address result not the same pointer type")
errorMessage(INDEX_SOURCE_INVALID,		     "Index source address is not a valid pointer")
errorMessage(INDEX_INDEX_INVALID,			 "Index instr. index not an integer")
errorMessage(INDEX_FIELD_INDEX_INVALID,	     "Index instr. index is out of range")
errorMessage(INDEX_RESULT_INVALID,		     "Index result not dereferenced pointer")
errorMessage(ELEMENT_SOURCE_INVALID,		 "Field source address is not a valid pointer")
errorMessage(ELEMENT_INDEX_INVALID,			 "Field index not an integer")
errorMessage(ELEMENT_FIELD_INDEX_NOT_CONST,  "Field field index not a constant integer")
errorMessage(ELEMENT_FIELD_INDEX_INVALID,	 "Field field index is out of range")
errorMessage(ELEMENT_RESULT_INVALID,		 "Field result not dereferenced pointer")
errorMessage(LOAD_SOURCE_INVALID,			 "Load source operand not pointer")
errorMessage(LOAD_RESULT_INVALID,            "Load result not dereferenced pointer")
errorMessage(STORE_DEST_INVALID,             "Store destination operand not pointer")
errorMessage(STORE_SOURCE_INVALID,           "Store source not compatible with destination")
errorMessage(RETURN_OP_FOR_VOID,             "Return with operand for 'void' function")
errorMessage(RETURN_NO_OP,                   "Expected return operand")
errorMessage(RETURN_OP_INCOMPATIBLE,         "Return operand incompatible")
errorMessage(COMPARE_OP_INVALID,             "Compare operands invalid")
errorMessage(COMPARE_OPERANDS_NOT_SAME_TYPE, "Compare operands not of the same type")
errorMessage(COMPARE_RESULT_NOT_INT,         "Compare result not an integer")
errorMessage(SWITCH_COND_OP_NULL,            "Switch condition operand not set")
errorMessage(SWITCH_COND_OP_NOT_INT,         "Switch condition operand not an integer")
errorMessage(SWITCH_DEFAULT_NULL,            "Switch has no default target")
errorMessage(SWITCH_CASE_TARGET_NULL,        "Switch case target is not set")
errorMessage(SWITCH_CASE_DUPLICATE,          "Switch case value is a duplicate")
// CompileOptions.hpp
// Copyright (c) Lup Gratian
//
// Stores all compile options and flags in a single place.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#ifndef PC_COMMON_COMPILE_OPTIONS_HPP
#define PC_COMMON_COMPILE_OPTIONS_HPP

#include "../Base/String.hpp"
#include "../Base/List.hpp"
#include "../Base/DebugValidator.hpp"
#include "../Base/SharedPointer.hpp"
#include "../Base/Log.hpp"
using namespace Base;

namespace Common {

// Represents the mode in which a floating-point operation is performed,
// from strict conformance to a more relaxed interpretation that allows
// some optimizations to be performed by the backend.
enum FPMode {
	FPMode_Exact, // No optimizations of expressions is allowed.
	FPMode_Safe,  // Some optimizations are enabled.
	FPMode_Fast	  // All optimizations are enabled.
};


class CompileOptions {
private:
	// File manager.
	List<string> systemDirs_;

	// Diagnostic.
	bool disabled_;             // All diagnostics should be disabled.
	bool noWarnings_;           // Warnings should not be emitted.
	bool warningsAreErrors_;    // Warnings should be treated like errors.
	bool errorsAreFatal_;       // All errors should be treated like fatal errors.
	bool ignoreInfo_;           // Info should not be emitted.
	bool limitErrors_;          // After a number of errors compilation should stop.
	bool ignoreStdlibWarnings_; // Warnings generated by standard library should be ignored.
	int errorLimit_;            // The number of errors after which compilation should stop.

	// IR Generator options.
	bool namedTemp_;       // The IR temporaries should be named (for debugging).
    bool namedFields_;     // The selected IR record fields should be named (for debugging).
	bool checkBounds_;     // Array bounds checks should be inserted.
	bool checkNull_;       // Null-pointer checks should be inserted.
	bool variableLocInfo_; // If the location of each variable should be recorded.
	bool overflowUndef_;   // Signed integer overflow is undefined.
	bool errnoDisabled_;   // 'errno' is not taken into consideration.
	FPMode fpMode_;        // Controls the mode of the floating-point instructions.

	// Other options.
	int packValue_;        // The alignment for struct/union. Can be set by #pragma.
	int defaultPackValue_; // The default alignment. Can only be set on the command-line.

public:
	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
	// Initializes the options to the default values.
	void Initialize() {
		disabled_          = false;
		noWarnings_        = false;
		warningsAreErrors_ = false;
		errorsAreFatal_    = false;
		ignoreInfo_        = false;
		limitErrors_       = true;
		errnoDisabled_     = true;

		errorLimit_        = 100;
		defaultPackValue_  = 8; // 8 byte maximum alignment for struct/union fields.
		packValue_         = defaultPackValue_;

#ifdef DEBUG
        namedTemp_   = true;
        namedFields_ = true;
#else
        namedTemp_   = false;
        namedFields_ = false;
#endif
	}

	// Returns 'true' if generating diagnostic messages is completely disabled.
	bool IsDiagnosticDisabled() const {
		return disabled_;
	}

	void SetIsDiagnosticDisabled(bool value) {
		disabled_ = value;
	}

	// Returns 'true' if warnings are ignored.
	bool NoWarnings() const {
		return noWarnings_;
	}

	void SetNoWarnings(bool value) {
		noWarnings_ = value;
	}

	// Returns 'true' if warnings are treated the same way as errors.
	bool WarningsAreErrors() const {
		return warningsAreErrors_;
	}

	void SetWarningsAreErrors(bool value) {
		warningsAreErrors_ = value;
	}

	// Returns 'true' if all errors should be treated like fatal errors.
	bool ErrorsAreFatal() const {
		return errorsAreFatal_;
	}

	void SetErrorsAreFatal(bool value) {
		errorsAreFatal_ = value;
	}

	// Returns 'true' if all info diagnostics should be ignored.
	bool IgnoreInfo() const {
		return ignoreInfo_;
	}

	void SetIgnoreInfo(bool value) {
		ignoreInfo_ = value;
	}

	// Returns 'true' if there is a limit on the number of errors.
	bool LimitErrors() const {
		return limitErrors_;
	}

	void SetLimitErrors(bool value) {
		limitErrors_ = value;
	}

	// Returns the maximum number of errors until compilation stops.
	int ErrorLimit() const {
		return errorLimit_;
	}

	void SetErrorLimit(int value) {
		errorLimit_ = value;
	}

	// Returns the maximum allowed alignment for the fields in a struct/union.
	int PackValue() const {
		return packValue_;
	}

	void SetPackValue(int value) {
		packValue_ = value;
	}

	// Returns the default alignment for fields in a struct/union.
	int DefaultPackValue() const {
		return defaultPackValue_;
	}

	void SetDefaultPackValue(int value) {
		defaultPackValue_ = value;
	}

	// Restores the default pack value.
	void RestorePackValue() {
		packValue_ = defaultPackValue_;
	}

	// Returns 'true' if the IR temporaries should be given a name.
	bool ShouldNameTemporaries() const {
		return namedTemp_;
	}

	void SetShouldNameTemporaries(bool value) {
		namedTemp_ = value;
	}

    bool ShouldNameFields() const {
        return namedFields_;
    }

    void SetShouldNameFields(bool value) {
        namedFields_ = value;
    }

	// Returns 'true' if code that check if a dereferenced pointer is null should be generated.
	bool CheckNullPointers() const {
		return checkNull_;
	}

	void SetCheckNullPointers(bool value) {
		checkNull_ = value;
	}

	// Returns 'true' if code that checks if the index is in the array bounds should be generated.
	bool CheckArrayBounds() const {
		return checkBounds_;
	}

	void SetCheckArrayBounds(bool value) {
		checkBounds_ = value;
	}

	// Returns 'true' if the location of the variables should be propagated to the IR.
	bool RecordVariableLocation() const {
		return variableLocInfo_;
	}

	void SetRecordVariableLocation(bool value) {
		variableLocInfo_ = value;
	}

	// Returns 'true' if signed integer overflow is undefined.
	// Can be used by the backend to optimize the code more aggressively.
	bool IsOverflowUndefined() const {
		return overflowUndef_;
	}

	void SetOverflowUndefined(bool value) {
		overflowUndef_ = value;
	}

	// Return the mode in which the floating-point instructions are performed.
	FPMode GetFloatingPointMode() const {
		return fpMode_;
	}

	void SetFloatingPointMode(FPMode value) {
		fpMode_ = value;
	}

	bool IgnoreStdlibWarnings() const {
		return ignoreStdlibWarnings_;
	}

	void SetIgnoreStdlibWarnings(bool value) {
		ignoreStdlibWarnings_ = value;
	}

	bool IsErrnoDisabled() const {
		return errnoDisabled_;
	}

	void SetIsErrnoDisabled(bool value) {
		errnoDisabled_ = value;
	}
};

} // namespace Common
#endif